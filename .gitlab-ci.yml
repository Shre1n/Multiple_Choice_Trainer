# Define Stages of CI
stages:
    - lint
    - sec_scan
    - deploy

# Language Syntax Job for
lint:
    stage: lint
    tags:
    - docker
    image: node:lts-bullseye-slim
    allow_failure: true
    before_script:
        cd multiple-choice/src
    script:
    - npm install
    - npm run lint

# Security Scan of dependencies
sec_scan:
    stage: sec_scan
    tags:
    - docker
    image: node:lts-bullseye-slim
    allow_failure: true
    before_script:
        cd multiple-choice
    script:
    - npm install
    - npm install -g npm-check
    - npm-check --skip-unused

# Gemeinsame Deploy-Konfiguration
.deploy: &deploy
    stage: deploy
    cache:
        key: "deploy-$CI_COMMIT_SHORT_SHA"
        paths:
            - platforms/
            - plugins/
    before_script:
        - rm -fr ~/Library/MobileDevice/Provisioning\ Profiles/
        - echo "$BUILD_CONFIG" | tr -d '\r' > build.json
    after_script:
        - rm build.json
        - cp $OUTPUT_PATH.$FILE_TYPE $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.$FILE_TYPE
    artifacts:
        paths:
            - $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.$FILE_TYPE
        expire_in: 7 days
    when: manual

# Deployment für Debug-Build
deploy:android:debug:
    <<: *deploy
    environment:
        name: production
    variables:
        PLATFORM: android
        FILE_TYPE: apk
        OUTPUT_PATH: platforms/android/app/build/outputs/apk/debug/app-debug
    script:
        - npm ci
        - ionic cordova build android --debug

# Deployment für Release-Build
deploy:android:release:
    <<: *deploy
    environment:
        name: production
    variables:
        PLATFORM: android
        FILE_TYPE: apk
        OUTPUT_PATH: platforms/android/app/build/outputs/apk/release/app-release
    script:
        - npm ci
        - ionic cordova build android --release